---
- name: debug masters
  debug:
    var: osreg_master_nodes

- name: Create S3 bucket
  delegate_to: localhost
  s3:
    bucket: "{{ osreg_bucket_name }}"
    mode: create
    region: "{{ osreg_region }}"
    aws_access_key: "{{ osreg_aws_access_key }}"
    aws_secret_key: "{{ osreg_aws_secret_key }}"
  run_once: true
  when: osreg_location == 'aws'

- name: create json file
  copy:
    content: "{{ g_gcp_docker_registry_creds | to_json }}"
    dest: /root/creds.json
  when: osreg_location == 'gcp'

- name: create gcp registry auth file
  oc_secret:
    state: present
    name: gcs-registry-secret
    namespace: default
    files:
    - name: creds.json
      path: /root/creds.json
  register: gcs_sec_out
  when: osreg_location == 'gcp'

- name: create the default registry service
  oc_service:
    namespace: default
    name: docker-registry
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      docker-registry: default
    session_affinity: ClientIP
    service_type: ClusterIP
  register: svc_out
  notify:
  - restart openshift master services

- name: Create a self-signed cert
  oadm_ca:
    cmd: create-server-cert
    signer_cert: /etc/origin/master/ca.crt
    signer_key: /etc/origin/master/ca.key
    signer_serial: /etc/origin/master/ca.serial.txt
    hostnames: "registry.{{ osreg_clusterid }}.openshift.com,{{ svc_out.results.clusterip }},docker-registry.default.svc.cluster.local"
    cert: /etc/origin/master/registry.crt
    key: /etc/origin/master/registry.key
  register: caout

- name: create registry certificates
  oc_secret:
    state: present
    name: registry-secret
    namespace: default
    files:
    - name: registry.key
      path: /etc/origin/master/registry.key
    - name: registry.crt
      path: /etc/origin/master/registry.crt
  register: cert_secret_out

- name: create registry config from template
  template:
    src: registry_config.yml.j2
    dest: /tmp/config.yml
    owner: root
    group: root
    mode: 0600
  changed_when: False

- name: create secret from registry config file
  oc_secret:
    name: docker-registry-config
    state: present
    namespace: default
    files:
    - name: config.yml
      path: /tmp/config.yml
    delete_after: true
  register: registry_config_out

- name: create registry serviceaccount
  oc_serviceaccount:
    name: registry
    namespace: default
    secrets:
    - docker-registry-config
    - registry-secret
  register: sa_out
  when: osreg_location == 'aws'

- name: add secrets to service accounts
  oc_secret_add:
    service_account: "{{ item.name }}"
    secrets: "{{ item.value }}"
    namespace: default
  with_items:
  - name: registry
    value:
    - docker-registry-config
    - registry-secret
  - name: default
    value:
    - registry-secret
  register: secret_add_out
  when: osreg_location == 'aws'

- name: create registry serviceaccount
  oc_serviceaccount:
    name: registry
    namespace: default
    secrets:
    - docker-registry-config
    - registry-secret
    - gcs-registry-secret
  register: sa_out
  when: osreg_location == 'gce'

- name: add secrets to service accounts
  oc_secret_add:
    service_account: "{{ item.name }}"
    secrets: "{{ item.value }}"
    namespace: default
  with_items:
  - name: registry
    value:
    - docker-registry-config
    - registry-secret
    - gcs-registry-secret
  - name: default
    value:
    - registry-secret
  register: secret_add_out
  when: osreg_location == 'gcp'

- debug:
    msg: "{{ svc_out.changed or cert_secret_out.changed or registry_config_out.changed or sa_out.changed }}"

- name: create a secure registry
  oadm_registry:
    credentials: /etc/origin/master/openshift-registry.kubeconfig
    name: docker-registry
    force: "{{ svc_out.changed or cert_secret_out.changed or registry_config_out.changed or sa_out.changed }}"
    service_account: registry
    replicas: 2
    namespace: default
    selector: type=infra
    env_vars:
      REGISTRY_CONFIGURATION_PATH: /etc/registryconfig/config.yml
      REGISTRY_HTTP_TLS_CERTIFICATE: /etc/secrets/registry.crt
      REGISTRY_HTTP_TLS_KEY: /etc/secrets/registry.key
      REGISTRY_HTTP_SECRET: "{{ osreg_registry_http_secret }}"
    volume_mounts:
    - path: /etc/secrets
      name: dockercerts
      type: secret
      secret_name: registry-secret
    - path: /etc/registryconfig
      name: dockersecrets
      type: secret
      secret_name: docker-registry-config
    edits:
        spec#template#spec#containers[0]#livenessProbe#httpGet#scheme: HTTPS
        spec#template#spec#containers[0]#readinessProbe#httpGet#scheme: HTTPS
  register: registryout

- name: Pause for race conditions
  pause:
    seconds: 60
  when: registryout.changed

- debug: var=registryout
  run_once: True

- name: create route for the registry
  oc_route:
    name: registry
    namespace: default
    tls_termination: reencrypt
    cert_content: "{{ osreg_openshift_cert_content }}"
    key_content: "{{ osreg_openshift_key_content }}"
    cacert_content: "{{ osreg_cacert_content }}"
    dest_cacert_path: /etc/origin/master/ca.crt
    service_name: docker-registry
    host: "registry.{{ osreg_clusterid }}.openshift.com"
  register: routeout
  run_once: True

- debug: var=routeout
  run_once: True
